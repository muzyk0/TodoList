{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","tasks","map","task","isDone","type","checked","changeTaskStatus","id","todoListID","newTitle","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","t","newTask","todoListTasks","newIsDoneValue","find","newFilterValue","todoList","tl","useEffect","todoListsItems","localStorage","getItem","newTodoListsItems","JSON","parse","setItem","stringify","tasksTodolist","newTasksTodoLists","todoListsComponents","tasksForTodoList","newTodoListID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.425118ec.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n    // const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n            // setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n            />\r\n\r\n            <button onClick={addItem}>Add</button>\r\n            {error && <div className={'errorMessage'}>'Title is required!'</div>} {/*{error}*/}\r\n        </div>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpan) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     onChange={changeTitle}\r\n                     onBlur={offEditMode}\r\n                     onKeyPress={onEnter}\r\n                     autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValuesType, TasksType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TasksType>\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListID)\r\n    }\r\n    const setAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n    const setActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n    const setCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n\r\n    const tasks = props.tasks.map(task => {\r\n            const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n            const changeTaskTitle = (newTitle: string) => {\r\n                props.changeTaskTitle(task.id, newTitle, props.todoListID)\r\n            }\r\n            return (\r\n                <li className={task.isDone ? 'isDone' : ''}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={task.isDone}\r\n                        onChange={changeTaskStatus}\r\n                    />\r\n                    <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                    <button onClick={removeTask}>X</button>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <div className={'task'}>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'selected' : ''}\r\n                        onClick={setAllFilter}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'selected' : ''}\r\n                        onClick={setActiveFilter}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'selected' : ''}\r\n                        onClick={setCompletedFilter}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TasksType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'HTML', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Meat', isDone: false},\r\n        ]\r\n    })\r\n\r\n        useEffect(() => {\r\n            const todoListsItems = localStorage.getItem('todoLists')\r\n            if (todoListsItems) {\r\n                const newTodoListsItems = JSON.parse(todoListsItems)\r\n                setTodoLists(newTodoListsItems)\r\n            }\r\n        }, [])\r\n        useEffect(() => {\r\n            localStorage.setItem('todoLists', JSON.stringify(todoLists))\r\n        }, [todoLists])\r\n\r\n        useEffect(() => {\r\n            const tasksTodolist = localStorage.getItem('tasksLists')\r\n            if (tasksTodolist) {\r\n                const newTasksTodoLists = JSON.parse(tasksTodolist)\r\n                setTasks(newTasksTodoLists)\r\n            }\r\n        }, [])\r\n        useEffect(() => {\r\n            localStorage.setItem('tasksLists', JSON.stringify(tasks))\r\n        }, [tasks])\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        // const todoListTasks = tasks[todoListID]\r\n        // const filteredTasks = todoListTasks.filter(t => t.id !== taskID)\r\n        // tasks[todoListID] = filteredTasks\r\n\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        // var 1 old school\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        // var 2 new school\r\n        // tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        // false -> undefined, null, 0, '', NaN\r\n        // true -> {}, [], ' '\r\n        if (task) {\r\n            task.isDone = newIsDoneValue\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {id: newTodoListID, title, filter: 'all'}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === 'active') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === 'completed') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <TodoList\r\n                todoListID={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasksForTodoList}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListsComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}