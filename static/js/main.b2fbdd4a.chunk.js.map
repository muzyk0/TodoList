{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/tasks-reducer.ts","TodoList.tsx","state/totolists-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","variant","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","ControlPoint","EditableSpan","editMode","setEditMode","color","onBlur","changeTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","todolistId","delete","put","taskId","model","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onTitleChangeHandler","useCallback","newTitle","id","style","status","Completed","opacity","Checkbox","checked","New","Delete","initialState","TodoList","filter","todoListID","changeTodoListFilter","dispatch","useDispatch","useEffect","todoListId","then","res","tasks","data","items","type","setTasksAC","addTask","changeTodoListTitle","taskID","t","getTasksForTodoList","map","removeTodoList","listStyle","paddingLeft","Button","size","App","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","useStyles","todoLists","useSelector","state","setTodoListAC","deleteTask","resultCode","item","createTask","getState","currentTask","find","deadline","description","priority","startDate","changeTaskStatusAC","updateTaskStatus","changeTaskTitleAC","updateTaskTitle","newFilterValue","addTodoList","todoList","createTodoList","changeTodoListTitleAC","todoListsComponents","tl","Grid","Paper","elevation","padding","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","rootReducer","combineReducers","action","copy","forEach","stateCopy","copyState","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b2fbdd4a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\n// Tasks\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string,\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    totalCount: number\r\n    error: string | null\r\n    items: Array<TaskType>\r\n}\r\n\r\n\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {\r\n            title\r\n        })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string,) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {ControlPoint} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm render')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error !== null) setError(null)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Type value\"\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={'errorMessage'}>'Title is required!'</div>} /!*{error}*!/*/}\r\n        </div>\r\n    )\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpan = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpan> = React.memo((props) => {\r\n    console.log('editableSpan render')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'secondary'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    } = props\r\n\r\n    const onClickHandler = () => {\r\n        removeTask(task.id)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\r\n        changeTaskTitle(task.id, newTitle)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return (\r\n        <li style={task.status === TaskStatuses.Completed ? {opacity: '0.5'} : {opacity: 1}}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import {AddTodoListActionType, RemoveTodoListActionType, SetTodoListType} from './totolists-reducer';\r\nimport {TasksStateType} from '../App';\r\nimport {TaskStatuses, TaskType, todolistAPI} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from './store';\r\n\r\ntype removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todoListId: string\r\n}\r\ntype changeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\n\r\n\r\nexport type ActionType = removeTaskActionType\r\n    | AddTaskACType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListType\r\n    | SetTasksType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const copy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copy[tl.id] = []\r\n            })\r\n            return copy\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(tl => tl.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            stateCopy[action.task.todoListId] = [action.task, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, status: action.status}\r\n                        : task)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, title: action.title}\r\n                        : task)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListId: string) => ({\r\n    type: 'SET-TASKS', tasks, todoListId\r\n} as const)\r\ntype SetTasksType = ReturnType<typeof setTasksAC>\r\n\r\nexport const removeTaskAC = (todoListId: string, taskId: string): removeTaskActionType => ({\r\n    type: 'REMOVE-TASK', todoListId, taskId\r\n})\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\ntype AddTaskACType = ReturnType<typeof addTaskAC>\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todoListId: string): changeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): changeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}\r\n\r\n// Thunk Creators\r\nexport const fetchTasks = (todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.getTasks(todoListId)\r\n        .then(res => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todoListId))\r\n        })\r\n}\r\nexport const deleteTask = (todoListID: string, taskID: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTask(todoListID, taskID)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(todoListID, taskID))\r\n        })\r\n}\r\nexport const createTask = (title: string, todoListID: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            }\r\n        })\r\n}\r\nexport const updateTaskStatus = (todolistId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const currentTask = getState().tasks[todolistId].find(t => (t.id === taskId))\r\n\r\n    if (currentTask) {\r\n        todolistAPI.updateTask(todolistId, taskId, {\r\n            title: currentTask.title,\r\n            status: status,\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate\r\n        })\r\n            .then(() => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTitle = (taskID: string, title: string, todoListID: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const currentTask = getState().tasks[todoListID].find(t => (t.id === taskID))\r\n\r\n    if (currentTask) {\r\n        todolistAPI.updateTask(todoListID, taskID, {\r\n            title: title,\r\n            status: currentTask.status,\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate\r\n        })\r\n            .then(() => {\r\n                dispatch(changeTaskTitleAC(taskID, title, todoListID))\r\n            })\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\nimport {FilterValuesType} from './state/totolists-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasks} from './state/tasks-reducer';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    removeTask: (todoListID: string, taskID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n    console.log('todolist render')\r\n    const {\r\n        title,\r\n        filter,\r\n        todoListID,\r\n        changeTodoListFilter\r\n    } = props\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(todoListID))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, todoListID)\r\n    }, [props.addTask, todoListID])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(todoListID)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, todoListID)\r\n    }, [props.changeTodoListTitle, todoListID])\r\n\r\n    const setAllFilter = () => changeTodoListFilter('all', todoListID)\r\n    const setActiveFilter = () => changeTodoListFilter('active', todoListID)\r\n    const setCompletedFilter = () => changeTodoListFilter('completed', todoListID)\r\n\r\n    // let tasksForTodolist = props.tasks\r\n    //\r\n    // if (filter === 'active') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    // }\r\n    // if (filter === 'completed') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    // }\r\n\r\n    const getTasksForTodoList = (tasks: TaskType[]) => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    // const tasks = tasksForTodolist.map(task => {\r\n    //         const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n    //         const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n    //             props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n    //         const changeTaskTitle = (newTitle: string) => {\r\n    //             props.changeTaskTitle(task.id, newTitle, props.todoListID)\r\n    //         }\r\n    //         return (\r\n    //             <li style={task.isDone ? {opacity: '0.5'} : {opacity: 1}} key={task.id}>\r\n    //                 <Checkbox\r\n    //                     checked={task.isDone}\r\n    //                     onChange={changeTaskStatus}\r\n    //                 />\r\n    //                 <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n    //                 <IconButton onClick={removeTask}>\r\n    //                     <Delete/>\r\n    //                 </IconButton>\r\n    //             </li>\r\n    //         )\r\n    //     }\r\n    // )\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        props.removeTask(todoListID, taskID)\r\n    }, [todoListID, props.removeTask])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses) => {\r\n        props.changeTaskStatus(taskID, status, todoListID)\r\n    }, [props.changeTaskStatus, todoListID])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string) => {\r\n        props.changeTaskTitle(taskID, newTitle, todoListID)\r\n    }, [props.changeTaskTitle, todoListID])\r\n\r\n    const tasks = getTasksForTodoList(props.tasks).map(task => {\r\n            return <Task\r\n                key={task.id}\r\n                task={task}\r\n                removeTask={removeTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        }\r\n    )\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'text'}\r\n                    size={'small'}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    size={'small'}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {todolistAPI, TodoListType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todoList: TodoListType\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionType = RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n    | SetTodoListType\r\n\r\nconst initialState: TodoListDomainType[] = []\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListsReducer = (state: TodoListDomainType[] = initialState, action: ActionType): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            return action.todoLists.map((tl) => ({\r\n                ...tl,\r\n                filter: 'all'\r\n            }))\r\n        }\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodoListDomainType = {\r\n                ...action.todoList,\r\n                filter: 'all',\r\n            }\r\n            return [...state, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setTodoListAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\nexport type SetTodoListType = ReturnType<typeof setTodoListAC>\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\nexport const addTodolistAC = (todoList: TodoListType): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', todoList}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}\r\n\r\n// Thunk Creators\r\n\r\nexport const fetchTodoLists = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodos()\r\n        .then((res) => {\r\n            const todoLists = res.data\r\n            dispatch(setTodoListAC(todoLists))\r\n        })\r\n}\r\nexport const createTodoList = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodo(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            }\r\n        })\r\n}\r\nexport const deleteTodoList = (todoListId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodo(todoListId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodoListAC(todoListId))\r\n            }\r\n        })\r\n}\r\nexport const updateTodoListTitle = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodoTitle(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todolistId, title))\r\n            }\r\n        })\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from './TodoList';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    createStyles,\r\n    Grid,\r\n    IconButton,\r\n    makeStyles,\r\n    Paper,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    changeTodoListFilterAC,\r\n    createTodoList,\r\n    deleteTodoList,\r\n    fetchTodoLists,\r\n    FilterValuesType,\r\n    TodoListDomainType,\r\n    updateTodoListTitle\r\n} from './state/totolists-reducer';\r\nimport {createTask, deleteTask, updateTaskStatus, updateTaskTitle} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport function App() {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((todoListID: string, taskID: string) => {\r\n        dispatch(deleteTask(todoListID, taskID))\r\n\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(createTask(title, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskStatus(todoListID, taskID, status))\r\n\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTitle(taskID, newTitle, todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, newFilterValue))\r\n\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoList(title))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoList(todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(updateTodoListTitle(todoListID, newTitle))\r\n\r\n    }, [dispatch])\r\n\r\n    // const getTasksForTodoList = (todoList: TodoListType): TasksType[] => {\r\n    //     switch (todoList.filter) {\r\n    //         case 'active':\r\n    //             return tasks[todoList.id].filter(t => !t.isDone)\r\n    //         case 'completed':\r\n    //             return tasks[todoList.id].filter(t => t.isDone)\r\n    //         default:\r\n    //             return tasks[todoList.id]\r\n    //     }\r\n    // }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasks[tl.id]}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from './totolists-reducer';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}