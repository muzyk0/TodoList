{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","variant","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","ControlPoint","EditableSpan","editMode","setEditMode","color","onBlur","changeTitle","autoFocus","onDoubleClick","TodoList","tasks","map","task","style","isDone","opacity","id","Checkbox","checked","changeTaskStatus","todoListID","newTitle","changeTaskTitle","removeTask","Delete","className","changeTodoListTitle","removeTodoList","addTask","listStyle","paddingLeft","Button","filter","size","changeTodoListFilter","MenuIcon","React","Component","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","t","newTask","todoListTasks","newIsDoneValue","find","newFilterValue","todoList","tl","useEffect","todoListsItems","localStorage","getItem","newTodoListsItems","JSON","parse","setItem","stringify","tasksTodolist","newTasksTodoLists","todoListsComponents","tasksForTodoList","Grid","item","Paper","elevation","padding","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","useStyles","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","container","newTodoListID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bbb2941c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {ControlPoint} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    // const [error, setError] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            //setError(true)\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Type value\"\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={'errorMessage'}>'Title is required!'</div>} /!*{error}*!/*/}\r\n        </div>\r\n    )\r\n}","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpan) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'secondary'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TasksType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TasksType>\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListID)\r\n    }\r\n    const setAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n    const setActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n    const setCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n\r\n    const tasks = props.tasks.map(task => {\r\n            const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n            const changeTaskTitle = (newTitle: string) => {\r\n                props.changeTaskTitle(task.id, newTitle, props.todoListID)\r\n            }\r\n            return (\r\n                <li style={task.isDone ? {opacity: '0.5'} : {opacity: 1}} key={task.id}>\r\n                    <Checkbox\r\n                        checked={task.isDone}\r\n                        onChange={changeTaskStatus}\r\n                    />\r\n                    <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                    <IconButton onClick={removeTask}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <div className={'task'}>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    size={'small'}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    size={'small'}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    IconButton,\r\n    Typography,\r\n    Toolbar,\r\n    Container,\r\n    Grid,\r\n    Paper,\r\n    makeStyles,\r\n    Theme, createStyles\r\n} from '@material-ui/core';\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TasksType[]\r\n}\r\n\r\nclass MenuIcon extends React.Component {\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'HTML', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'REACT', isDone: false},\r\n            {id: v1(), title: 'Graph QL', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Meat', isDone: false},\r\n        ]\r\n    })\r\n\r\n    useEffect(() => {\r\n        const todoListsItems = localStorage.getItem('todoLists')\r\n        if (todoListsItems) {\r\n            const newTodoListsItems = JSON.parse(todoListsItems)\r\n            setTodoLists(newTodoListsItems)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('todoLists', JSON.stringify(todoLists))\r\n    }, [todoLists])\r\n\r\n    useEffect(() => {\r\n        const tasksTodolist = localStorage.getItem('tasksLists')\r\n        if (tasksTodolist) {\r\n            const newTasksTodoLists = JSON.parse(tasksTodolist)\r\n            setTasks(newTasksTodoLists)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('tasksLists', JSON.stringify(tasks))\r\n    }, [tasks])\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        // const todoListTasks = tasks[todoListID]\r\n        // const filteredTasks = todoListTasks.filter(t => t.id !== taskID)\r\n        // tasks[todoListID] = filteredTasks\r\n\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        // var 1 old school\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        // var 2 new school\r\n        // tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        // false -> undefined, null, 0, '', NaN\r\n        // true -> {}, [], ' '\r\n        if (task) {\r\n            task.isDone = newIsDoneValue\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function changeTodoListTitle(newTitle: string, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1()\r\n        const newTodoList: TodoListType = {id: newTodoListID, title, filter: 'all'}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === 'active') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === 'completed') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForTodoList}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}