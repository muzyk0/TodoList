{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/totolists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","label","variant","helperText","value","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","ControlPoint","EditableSpan","editMode","setEditMode","color","onBlur","changeTitle","autoFocus","onDoubleClick","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onTitleChangeHandler","useCallback","newTitle","id","style","isDone","opacity","Checkbox","checked","Delete","TodoList","filter","todoListID","changeTodoListFilter","addTask","changeTodoListTitle","allTodolistTasks","tasks","tasksForTodolist","t","taskID","newIsDoneValue","map","removeTodoList","listStyle","paddingLeft","Button","size","initialState","v1","App","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","useStyles","todoLists","useSelector","state","dispatch","useDispatch","type","taskId","todoListId","addTaskAC","newFilterValue","action","addTodoList","addTodolistAC","todoListsComponents","tl","Grid","item","Paper","elevation","padding","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","rootReducer","combineReducers","copyState","newTask","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.325a1490.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {ControlPoint} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm render')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error !== null) setError(null)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Type value\"\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={'errorMessage'}>'Title is required!'</div>} /!*{error}*!/*/}\r\n        </div>\r\n    )\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpan> = React.memo((props) => {\r\n    console.log('editableSpan render')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'secondary'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n                autoFocus/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import {TasksType} from './AppOld';\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype TaskType = {\r\n    task: TasksType\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n}\r\nexport const Task: React.FC<TaskType> = React.memo((props) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    } = props\r\n\r\n    const onClickHandler = () => {\r\n        removeTask(task.id)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\r\n        changeTaskTitle(task.id, newTitle)\r\n    }, [task.id])\r\n\r\n    return (\r\n        <li style={task.isDone ? {opacity: '0.5'} : {opacity: 1}}>\r\n            <Checkbox\r\n                checked={task.isDone}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValuesType, TasksType} from './AppOld';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TasksType>\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n    const {\r\n        title,\r\n        filter,\r\n        todoListID,\r\n        changeTodoListFilter\r\n    } = props\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, todoListID)\r\n    }, [props.addTask, todoListID])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(todoListID)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(title, todoListID)\r\n    }, [props.changeTodoListTitle, todoListID])\r\n\r\n    const setAllFilter = () => changeTodoListFilter('all', todoListID)\r\n    const setActiveFilter = () => changeTodoListFilter('active', todoListID)\r\n    const setCompletedFilter = () => changeTodoListFilter('completed', todoListID)\r\n\r\n    let allTodolistTasks = props.tasks;\r\n    let tasksForTodolist = allTodolistTasks;\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = allTodolistTasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.isDone);\r\n    }\r\n\r\n    // const tasks = tasksForTodolist.map(task => {\r\n    //         const removeTask = () => props.removeTask(task.id, props.todoListID)\r\n    //         const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n    //             props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID)\r\n    //         const changeTaskTitle = (newTitle: string) => {\r\n    //             props.changeTaskTitle(task.id, newTitle, props.todoListID)\r\n    //         }\r\n    //         return (\r\n    //             <li style={task.isDone ? {opacity: '0.5'} : {opacity: 1}} key={task.id}>\r\n    //                 <Checkbox\r\n    //                     checked={task.isDone}\r\n    //                     onChange={changeTaskStatus}\r\n    //                 />\r\n    //                 <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n    //                 <IconButton onClick={removeTask}>\r\n    //                     <Delete/>\r\n    //                 </IconButton>\r\n    //             </li>\r\n    //         )\r\n    //     }\r\n    // )\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        props.removeTask(taskID, todoListID)\r\n    }, [props.removeTask, todoListID])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newIsDoneValue: boolean) => {\r\n        props.changeTaskStatus(taskID, newIsDoneValue, todoListID)\r\n    }, [props.changeTaskStatus, todoListID])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string) => {\r\n        props.changeTaskTitle(taskID, newTitle, todoListID)\r\n    }, [props.changeTaskTitle, todoListID])\r\n\r\n    const tasks = tasksForTodolist.map(task => {\r\n\r\n            return <Task\r\n                key={task.id}\r\n                task={task}\r\n                removeTask={removeTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        }\r\n    )\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'text'}\r\n                    size={'small'}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    size={'small'}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import {FilterValuesType, TodoListType} from '../AppOld';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype ChangeTodoListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionType = RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodoListFilterActionType\r\n\r\nexport const todoListID_1 = v1();\r\nexport const todoListID_2 = v1();\r\nconst initialState: TodoListType[] = []\r\n\r\nexport const todoListsReducer = (state: TodoListType[] = initialState, action: ActionType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            const newTodoList: TodoListType = {id: action.todoListId, title: action.title, filter: 'all'}\r\n            return [...state, newTodoList]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodoListActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todoListId: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (id: string, title: string): ChangeTodoListTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter}\r\n}","import {TasksStateType, TasksType} from '../AppOld';\r\nimport {v1} from 'uuid';\r\nimport {AddTodoListActionType, RemoveTodoListActionType} from './totolists-reducer';\r\n\r\ntype removeTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todoListId: string\r\n}\r\ntype addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListId: string\r\n}\r\ntype changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todoListId: string\r\n}\r\ntype changeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\n\r\n\r\nexport type ActionType = removeTaskActionType\r\n    | addTaskActionType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\nconst initialState = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state}\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(tl => tl.id !== action.taskId)\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK': {\r\n            const newTask: TasksType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [newTask, ...state[action.todoListId]]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, isDone: action.isDone}\r\n                        : task)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, title: action.title}\r\n                        : task)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoListId: string): removeTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todoListId}\r\n}\r\nexport const addTaskAC = (title: string, todoListId: string): addTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todoListId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): changeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): changeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from './TodoList';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    createStyles,\r\n    Grid,\r\n    IconButton,\r\n    makeStyles,\r\n    Paper,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodoListAC\r\n} from './state/totolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: TasksType[]\r\n}\r\n\r\n\r\nexport function App() {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, newIsDoneValue: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskID, newIsDoneValue, todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, newTitle, todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, newFilterValue))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleAC(todoListID, newTitle))\r\n\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const action = removeTodoListAC(todoListID)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    // const getTasksForTodoList = (todoList: TodoListType): TasksType[] => {\r\n    //     switch (todoList.filter) {\r\n    //         case 'active':\r\n    //             return tasks[todoList.id].filter(t => !t.isDone)\r\n    //         case 'completed':\r\n    //             return tasks[todoList.id].filter(t => t.isDone)\r\n    //         default:\r\n    //             return tasks[todoList.id]\r\n    //     }\r\n    // }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasks[tl.id]}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {todoListsReducer} from './totolists-reducer';\r\nimport {tasksReducer} from './tasks-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}