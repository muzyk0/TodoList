{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","AddTask","trimmedTitle","trim","addTask","todoListId","tasks","map","task","className","isDone","type","checked","onChange","e","changeTaskStatus","id","currentTarget","onClick","removeTask","removeTodoList","value","onKeyPress","key","filter","changeForTodoList","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","taskID","todoListID","t","newTask","todoListTasks","newIsDoneValue","find","changeTodoListFilter","newFilterValue","todoList","tl","todoListsComponents","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.42611410.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {FilterValuesType, TasksType} from './App';\r\n\r\ntype TodoListPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TasksType>\r\n    addTask: (taskID: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeForTodoList: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n    changeTaskStatus: (taskID: string, newIsDoneValue: boolean, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const AddTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(trimmedTitle, props.todoListId)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            AddTask()\r\n        }\r\n    }\r\n// ChangeEvent<HTMLInputElement>\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListId)\r\n    }\r\n    const setAllFilter = () => props.changeForTodoList('all', props.todoListId)\r\n    const setActiveFilter = () => props.changeForTodoList('active', props.todoListId)\r\n    const setCompletedFilter = () => props.changeForTodoList('completed', props.todoListId)\r\n\r\n\r\n    const tasks = props.tasks.map(task => {\r\n            const removeTask = () => props.removeTask(task.id, props.todoListId)\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n                props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListId)\r\n\r\n            return (\r\n                <li className={task.isDone ? 'isDone' : ''}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={task.isDone}\r\n                        onChange={changeTaskStatus}\r\n                    />\r\n                    <span>{task.title}</span>\r\n                    <button onClick={removeTask}>X</button>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <div className={'task'}>\r\n            <h3>{props.title}\r\n                <button onClick={removeTodoList}>X</button>\r\n            </h3>\r\n\r\n            <div>\r\n                <input\r\n                    className={error ? 'error' : ''}\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                    onKeyPress={onKeyPressAddTask}\r\n                />\r\n\r\n                <button onClick={AddTask}>Add</button>\r\n                {error && <div className={'errorMessage'}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === 'all' ? 'selected' : ''}\r\n                        onClick={setAllFilter}>All\r\n                </button>\r\n                <button className={props.filter === 'active' ? 'selected' : ''}\r\n                        onClick={setActiveFilter}>Active\r\n                </button>\r\n                <button className={props.filter === 'completed' ? 'selected' : ''}\r\n                        onClick={setCompletedFilter}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\n\r\n/*export function Counter() {\r\n    let [data, setData] = useState(5)\r\n\r\n\r\n    return <div onClick={() => {\r\n        setData(data + 1)\r\n    }}>{data}</div>\r\n}*/\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: TasksType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'HTML', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Meat', isDone: false},\r\n        ],\r\n    })\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        // const todoListTasks = tasks[todoListID]\r\n        // const filteredTasks = todoListTasks.filter(t => t.id !== taskID)\r\n        // tasks[todoListID] = filteredTasks\r\n\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        // var 1 old school\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todoListTasks]\r\n        // var 2 new school\r\n        // tasks[todoListID] = [newTask, ...tasks[todoListID]]\r\n\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskStatus(taskID: string, newIsDoneValue: boolean, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        const task = todoListTasks.find(t => t.id === taskID)\r\n        // false -> undefined, null, 0, '', NaN\r\n        // true -> {}, [], ' '\r\n        if (task) {\r\n            task.isDone = newIsDoneValue\r\n            setTasks({...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeTodoListFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === 'active') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === 'completed') {\r\n            tasksForTodoList = tasksForTodoList.filter(t => t.isDone)\r\n        }\r\n\r\n        return (\r\n            <TodoList\r\n                todoListId={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasksForTodoList}\r\n                addTask={addTask}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeForTodoList={changeTodoListFilter}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            {todoListsComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}