{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodoListsList/TodoList/totolists-reducer.ts","features/TodoListsList/TodoList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EdditableSpan/EditableSpan.tsx","features/TodoListsList/TodoList/Task/Task.tsx","features/TodoListsList/TodoList/TodoList.tsx","features/TodoListsList/TodoListsList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedIn","type","status","isInitialized","removeTodoListAC","id","changeTodoListTitleAC","setTasksAC","todoListId","tasks","updateTaskAC","changeTaskEntityStatusAC","entityStatus","updateTask","todoListID","taskID","getState","a","currentTask","find","t","console","warn","apiModel","deadline","description","priority","startDate","res","resultCode","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trimmedTitle","trim","TextField","label","variant","helperText","value","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","onClick","ControlPoint","EditableSpan","editMode","setEditMode","color","onBlur","changeTitle","autoFocus","onDoubleClick","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onTitleChangeHandler","useCallback","newTitle","style","Completed","opacity","Checkbox","checked","New","Delete","TodoList","filter","changeTodoListFilter","useDispatch","useEffect","items","addTask","changeTodoListTitle","getTasksForTodoList","map","removeTodoList","listStyle","paddingLeft","Button","size","TodoListsList","todoLists","useSelector","state","auth","deleteTask","item","createTask","newFilterValue","addTodoList","todoList","createTodoList","to","todoListsComponents","tl","Grid","Paper","elevation","padding","container","spacing","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","classes","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","useStyles","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","copy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"iNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCqCMC,EAOAC,E,2JA5DNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIZE,GACP,OAAOR,EAASS,KAA2C,aAAc,CAACD,WALrEF,EAAc,SAOZI,GACP,OAAOV,EAASW,OAAT,qBAA4CD,KAR9CJ,EAAc,SAUPI,EAAoBF,GAChC,OAAOR,EAASY,IAAT,qBAAyCF,GAAc,CAACF,WAX1DF,EAAc,SAedI,GACL,OAAOV,EAASO,IAAT,sBAA8CG,EAA9C,YAhBFJ,EAAc,SAkBZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,sBAA+DC,EAA/D,UAAmF,CACtFF,WApBCF,EAAc,SAuBZI,EAAoBG,EAAgBC,GAC3C,OAAOd,EAASY,IAAT,sBAAoDF,EAApD,kBAAwEG,GAAUC,IAxBpFR,EAAc,SA0BZI,EAAoBG,GAC3B,OAAOb,EAASW,OAAT,sBAA6CD,EAA7C,kBAAiEG,KAInEE,EAAU,SACbC,GACF,OAAOhB,EAASS,KAAuC,aAAcO,IAFhED,EAAU,WAKf,OAAOf,EAASW,OAAyC,eALpDI,EAAU,WAQf,OAAOf,EAASO,IAA8B,a,SAK1CT,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KCzDL,IAAMkB,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAYL,EAAKG,SAAS,KAEnCD,EAASG,EAAY,wBAEzBH,EAASI,EAAa,YAGbC,EAA2B,SAACC,EAA0BN,GAC/DA,EAASG,EAAYG,EAAMC,UAC3BP,EAASI,EAAa,YCXpBI,EAAe,CACjBC,YAAY,GAaHC,EAAgB,SAACD,GAAD,MAA0B,CACnDE,KAAM,yBAA0BF,eCb9BD,EAAe,CACjBI,OAAQ,OACRN,MAAO,KACPO,eAAe,GAmBNT,EAAe,SAACQ,GAAD,MAAgC,CAACD,KAAM,iBAAkBC,WACxET,EAAc,SAACG,GAAD,MAA2B,CAACK,KAAM,gBAAiBL,UCzBxEE,EAAqC,GAuB9BM,EAAmB,SAACC,GAAD,MAAiB,CAACJ,KAAM,kBAAmBI,OAE9DC,EAAwB,SAACD,EAAYzB,GAAb,MAAgC,CAACqB,KAAM,wBAAyBI,KAAIzB,U,QCxBnGkB,EAA+B,GAwExBS,EAAa,SAACC,EAAoBC,GAArB,MACrB,CAACR,KAAM,YAAaQ,QAAOD,eAKnBE,EAAe,SAACF,EAAoBvB,EAAgBC,GAArC,MACvB,CAACe,KAAM,cAAef,QAAOsB,aAAYvB,WACjC0B,EAA2B,SAACH,EAAoBvB,EAAgB2B,GAArC,MAA0E,CAC9GX,KAAM,4BACNO,aACAvB,SACA2B,iBA4CSC,GAAa,SAACC,EAAoBC,EAAgB7B,GAArC,8CAAoF,WAAOI,EAAU0B,GAAjB,mBAAAC,EAAA,yDAEpGC,EAAcF,IAAWP,MAAMK,GAAYK,MAAK,SAAAC,GAAC,OAAKA,EAAEf,KAAOU,KAFqC,uBAItGM,QAAQC,KAAK,+BAJyF,iCAQpGC,EARoG,aAStG3C,MAAOsC,EAAYtC,MACnBsB,OAAQgB,EAAYhB,OACpBsB,SAAUN,EAAYM,SACtBC,YAAaP,EAAYO,YACzBC,SAAUR,EAAYQ,SACtBC,UAAWT,EAAYS,WACpBzC,GAfmG,SAmBtGI,EAASI,EAAa,YACtBJ,EAASqB,EAAyBG,EAAYC,EAAQ,YApBgD,UAqBpFrC,EAAuBoC,EAAYC,EAAQQ,GArByC,QAsB1E,KADtBK,EArBgG,QAsB9FxC,KAAKyC,YACTvC,EAASoB,EAAaI,EAAYC,EAAQQ,IAC1CjC,EAASI,EAAa,cACtBJ,EAASqB,EAAyBG,EAAYC,EAAQ,eAEtD1B,EAAqBuC,EAAIxC,KAAME,GA3BmE,kDA8BtGK,EAAyB,EAAD,GAAQL,GA9BsE,0DAApF,yD,yDC7HbwC,GAAcC,IAAMC,MAAK,SAACC,GACnCZ,QAAQa,IAAI,sBACZ,MAA0BC,mBAAiB,IAA3C,oBAAOvD,EAAP,KAAcwD,EAAd,KACA,EAA0BD,mBAAwB,MAAlD,oBAAOvC,EAAP,KAAcyC,EAAd,KAWMC,EAAU,WACZ,IAAMC,EAAe3D,EAAM4D,OACvBD,EACAN,EAAMK,QAAQC,GAEdF,EAAS,sBAEbD,EAAS,KAEb,OACI,iCACI,eAACK,GAAA,EAAD,CACIC,MAAM,aACNC,QAAS,WACT/C,QAASA,EACTgD,WAAYhD,EACZiD,MAAOjE,EACPkE,SA1BQ,SAACC,GACjBX,EAASW,EAAEC,cAAcH,OACX,OAAVjD,GAAgByC,EAAS,OAyBrBY,WAvBc,SAACF,GACT,UAAVA,EAAEG,KACFZ,KAsBIa,SAAUlB,EAAMkB,WAEpB,eAACC,EAAA,EAAD,CAAYC,QAASf,EAASa,SAAUlB,EAAMkB,SAA9C,SACI,eAACG,GAAA,EAAD,YCpCHC,GAAuCxB,IAAMC,MAAK,SAACC,GAC5DZ,QAAQa,IAAI,uBAEZ,MAAgCC,oBAAkB,GAAlD,oBAAOqB,EAAP,KAAiBC,EAAjB,KACA,EAA0BtB,mBAAiB,IAA3C,oBAAOvD,EAAP,KAAcwD,EAAd,KAsBA,OACIoB,EACM,eAACf,GAAA,EAAD,CACEiB,MAAO,YACPb,MAAOjE,EACPkE,SAfQ,SAACC,GACjBX,EAASW,EAAEC,cAAcH,QAejBc,OApBQ,WAChBF,GAAY,GACZxB,EAAM2B,YAAYhF,IAmBVqE,WAdI,SAACF,GACC,UAAVA,EAAEG,MACFO,GAAY,GACZxB,EAAM2B,YAAYhF,KAYdiF,WAAS,IAEX,uBAAMC,cA9BG,WACV7B,EAAMkB,WACPM,GAAY,GACZrB,EAASH,EAAMrD,SA2Bb,SAAkCqD,EAAMrD,W,oBC/BzCmF,GAAgChC,IAAMC,MAAK,SAACC,GAErD,IACI+B,EAIA/B,EAJA+B,KACAC,EAGAhC,EAHAgC,WACAC,EAEAjC,EAFAiC,iBACAC,EACAlC,EADAkC,gBASEC,EAAuBC,uBAAY,SAACC,GACtCH,EAAgBH,EAAK3D,GAAIiE,KAC1B,CAACH,EAAiBH,EAAK3D,KAE1B,OACI,sBAAIkE,MAAOP,EAAK9D,SAAWhC,EAAasG,UAAY,CAACC,QAAS,OAAS,CAACA,QAAS,GAAjF,UACI,eAACC,GAAA,EAAD,CACIC,QAASX,EAAK9D,SAAWhC,EAAasG,UACtC1B,SAXY,SAACC,GACrBmB,EAAiBF,EAAK3D,GAAI0C,EAAEC,cAAc2B,QAAUzG,EAAasG,UAAYtG,EAAa0G,MAWlFzB,SAAUlB,EAAMkB,WAEpB,eAACI,GAAD,CAAc3E,MAAOoF,EAAKpF,MAAOgF,YAAaQ,EAAsBjB,SAAUlB,EAAMkB,WACpF,eAACC,EAAA,EAAD,CAAYC,QAlBG,WACnBY,EAAWD,EAAK3D,KAiByB8C,SAAUlB,EAAMkB,SAArD,SACI,eAAC0B,GAAA,EAAD,YCfHC,GAAW/C,IAAMC,MAAK,SAACC,GAChCZ,QAAQa,IAAI,mBACZ,IACItD,EAIAqD,EAJArD,MACAmG,EAGA9C,EAHA8C,OACAjE,EAEAmB,EAFAnB,WACAkE,EACA/C,EADA+C,qBAGE1F,EAAW2F,cAEjBC,qBAAU,WJwDY,IAAC1E,EIvDnBlB,GJuDmBkB,EIvDCM,EJuDF,uCAAkC,WAAMxB,GAAN,iBAAA2B,EAAA,sEAEpD3B,EAASI,EAAa,YAF8B,SAGlChB,EAAqB8B,GAHa,OAG9CoB,EAH8C,OAI9CnB,EAAQmB,EAAIxC,KAAK+F,MACvB7F,EAASiB,EAAWC,EAAYC,IAChCnB,EAASI,EAAa,cAN8B,kDAQpDC,EAAyB,EAAD,GAAQL,GARoB,0DAAlC,0DItDnB,IAEH,IAAM8F,EAAUf,uBAAY,SAACzF,GACzBqD,EAAMmD,QAAQtE,EAAYlC,KAC3B,CAACqD,EAAMmD,QAAStE,IAMbuE,EAAsBhB,uBAAY,SAACzF,GACrCqD,EAAMoD,oBAAoBvE,EAAYlC,KACvC,CAACqD,EAAMoD,oBAAqBvE,IA0BzBmD,EAAaI,uBAAY,SAACtD,GAC5BkB,EAAMgC,WAAWnD,EAAYC,KAC9B,CAACD,EAAYmB,EAAMgC,aAEhBC,EAAmBG,uBAAY,SAACtD,EAAgBb,GAClD+B,EAAMiC,iBAAiBpD,EAAYC,EAAQb,KAC5C,CAAC+B,EAAMiC,iBAAkBpD,IAEtBqD,EAAkBE,uBAAY,SAACtD,EAAgBuD,GACjDrC,EAAMkC,gBAAgBrD,EAAYC,EAAQuD,KAC3C,CAACrC,EAAMkC,gBAAiBrD,IAErBL,EAvBsB,SAACA,GACzB,OAAQsE,GACJ,IAAK,SACD,OAAO9C,EAAMxB,MAAMsE,QAAO,SAAA3D,GAAC,OAAIA,EAAElB,SAAWhC,EAAa0G,OAC7D,IAAK,YACD,OAAO3C,EAAMxB,MAAMsE,QAAO,SAAA3D,GAAC,OAAIA,EAAElB,SAAWhC,EAAasG,aAC7D,QACI,OAAO/D,GAgBL6E,CAAoBrD,EAAMxB,OAAO8E,KAAI,SAAAvB,GAC3C,OAAO,eAACD,GAAD,CAEHC,KAAMA,EACNC,WAAYA,EACZC,iBAAkBA,EAClBC,gBAAiBA,EACjBhB,SAAgC,YAAtBa,EAAKpD,cALVoD,EAAK3D,OAStB,OACI,iCACI,gCACI,eAACkD,GAAD,CAAc3E,MAAOA,EAAOgF,YAAayB,EAAqBlC,SAAiC,YAAvBlB,EAAMrB,eAC9E,eAACwC,EAAA,EAAD,CAAYC,QA3DD,WACnBpB,EAAMuD,eAAe1E,IA0DwBqC,SAAiC,YAAvBlB,EAAMrB,aAArD,SACI,eAACiE,GAAA,EAAD,SAGR,eAAC/C,GAAD,CAAaQ,QAAS8C,EAASjC,SAAiC,YAAvBlB,EAAMrB,eAC/C,qBAAI2D,MAAO,CAACkB,UAAW,OAAQC,YAAa,GAA5C,SACKjF,IAEL,iCACI,eAACkF,EAAA,EAAD,CACIhD,QAAoB,QAAXoC,EAAmB,YAAc,OAC1Ca,KAAM,QACNvC,QA/DK,kBAAM2B,EAAqBlE,EAAY,QA4DhD,iBAKA,eAAC6E,EAAA,EAAD,CACIhD,QAAoB,WAAXoC,EAAsB,YAAc,OAC7CrB,MAAO,YACPkC,KAAM,QACNvC,QApEQ,kBAAM2B,EAAqBlE,EAAY,WAgEnD,oBAMA,eAAC6E,EAAA,EAAD,CACIhD,QAAoB,cAAXoC,EAAyB,YAAc,OAChDrB,MAAO,UACPkC,KAAM,QACNvC,QAzEW,kBAAM2B,EAAqBlE,EAAY,cAqEtD,gC,SCzGH+E,GAAkD,WAE3D,IAAMC,EAAYC,aAAoD,SAAAC,GAAK,OAAIA,EAAMF,aAC/ErF,EAAQsF,aAA8C,SAAAC,GAAK,OAAIA,EAAMvF,SACrEV,EAAagG,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKlG,cACxET,EAAW2F,cAEjBC,qBAAU,WACDnF,GAGLT,ENKsB,uCAAgB,WAAMA,GAAN,eAAA2B,EAAA,sEAEtC3B,EAASI,EAAa,YAFgB,SAGpBhB,IAHoB,OAGhCkD,EAHgC,OAItCtC,EAb0D,CAACW,KAAM,gBAAiB6F,UAa3DlE,EAAIxC,OAC3BE,EAASI,EAAa,cALgB,gDAOtCC,EAAyB,EAAD,GAAQL,GAPM,yDAAhB,yDMJvB,IAEH,IAAM2E,EAAaI,uBAAY,SAACvD,EAAoBC,GAChDzB,ELsEkB,SAACwB,EAAoBC,GAArB,8CAAkD,WAAMzB,GAAN,eAAA2B,EAAA,sEAEpE3B,EAASI,EAAa,YAF8C,SAGlDhB,EAAuBoC,EAAYC,GAHe,OAKxC,KAFtBa,EAH8D,QAK5DxC,KAAKyC,YACTvC,EA9BP,CAACW,KAAM,cAAeO,WA8BOM,EA9BK7B,OA8BO8B,IAClCzB,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GATiC,gDAYpEK,EAAyB,EAAD,GAAQL,GAZoC,yDAAlD,sDKtET4G,CAAWpF,EAAYC,MAEjC,CAACzB,IACE8F,EAAUf,uBAAY,SAACvD,EAAoBlC,GAC7CU,ELiFkB,SAACwB,EAAoBlC,GAArB,8CAAiD,WAAMU,GAAN,eAAA2B,EAAA,sEAEnE3B,EAASI,EAAa,YAF6C,SAGjDhB,EAAuBoC,EAAYlC,GAHc,OAIvC,KADtBgD,EAH6D,QAI3DxC,KAAKyC,YACTvC,EA1CP,CAACW,KAAM,WAAY+D,KA0COpC,EAAIxC,KAAKA,KAAK+G,OACjC7G,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GARgC,gDAWnEK,EAAyB,EAAD,GAAQL,GAXmC,yDAAjD,sDKjFT8G,CAAWtF,EAAYlC,MACjC,CAACU,IACE4E,EAAmBG,uBAAY,SAACvD,EAAoBC,EAAgBb,GACtEZ,EAASuB,GAAWC,EAAYC,EAAQ,CAACb,cAE1C,CAACZ,IACE6E,EAAkBE,uBAAY,SAACvD,EAAoBC,EAAgBuD,GACrEhF,EAASuB,GAAWC,EAAYC,EAAQ,CAACnC,MAAO0F,OAEjD,CAAChF,IACE0F,EAAuBX,uBAAY,SAACvD,EAAoBuF,GAC1D/G,ENnByE,CAACW,KAAM,yBAA0BI,GMmB1ES,ENnB8EiE,OMmBlEsB,MAE7C,CAAC/G,IACEgH,EAAcjC,uBAAY,SAACzF,GAC7BU,ENRsB,SAACV,GAAD,8CAA6B,WAAMU,GAAN,eAAA2B,EAAA,sEAEnD3B,EAASI,EAAa,YAF6B,SAGjChB,EAAuBE,GAHU,OAIvB,KADtBgD,EAH6C,QAI3CxC,KAAKyC,YACTvC,EAtB8C,CAACW,KAAM,eAAgBsG,SAsB9C3E,EAAIxC,KAAKA,KAAK+G,OACrC7G,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GARgB,gDAWnDK,EAAyB,EAAD,GAAQL,GAXmB,yDAA7B,sDMQbkH,CAAe5H,MACzB,CAACU,IACEkG,EAAiBnB,uBAAY,SAACvD,GNIV,IAACN,EMHvBlB,GNGuBkB,EMHCM,ENGF,uCAAkC,WAAMxB,GAAN,eAAA2B,EAAA,sEAExD3B,EAASI,EAAa,YACtBJ,EA/BsF,CAACW,KAAM,gCAAiCI,GA+BxFG,EA/B4FI,aA+BhF,YAHM,SAItClC,EAAuB8B,GAJe,OAK5B,KADtBoB,EAJkD,QAKhDxC,KAAKyC,YACTvC,EAASc,EAAiBI,IAC1BlB,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GATqB,gDAYxDK,EAAyB,EAAD,GAAQL,GAZwB,yDAAlC,0DMDvB,CAACA,IACE+F,EAAsBhB,uBAAY,SAACvD,EAAoBwD,GNe9B,IAACxF,EAAoBF,EMdhDU,GNc4BR,EMdCgC,ENcmBlC,EMdP0F,ENcd,uCAAiD,WAAMhF,GAAN,eAAA2B,EAAA,sEAE5E3B,EAASI,EAAa,YAFsD,SAG1DhB,EAA4BI,EAAYF,GAHkB,OAIhD,KADtBgD,EAHsE,QAIpExC,KAAKyC,YACTvC,EAASgB,EAAsBxB,EAAYF,IAC3CU,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GARyC,gDAW5EK,EAAyB,EAAD,GAAQL,GAX4C,yDAAjD,0DMZ5B,CAACA,IAEJ,IAAKS,EACD,OAAO,eAAC,KAAD,CAAU0G,GAAI,WAGzB,IAAMC,EAAsBZ,EAAUP,KAAI,SAAAoB,GACtC,OACI,eAACC,GAAA,EAAD,CAAMT,MAAI,EAAV,SACI,eAACU,GAAA,EAAD,CAAOC,UAAW,EAAGvC,MAAO,CAACwC,QAAS,QAAtC,SACI,eAACjC,GAAD,CAEIhE,WAAY6F,EAAGtG,GACfzB,MAAO+H,EAAG/H,MACVmG,OAAQ4B,EAAG5B,OACXnE,aAAc+F,EAAG/F,aACjBH,MAAOA,EAAMkG,EAAGtG,IAChB+E,QAASA,EACTnB,WAAYA,EACZuB,eAAgBA,EAChBtB,iBAAkBA,EAClBc,qBAAsBA,EACtBK,oBAAqBA,EACrBlB,gBAAiBA,GAZZwC,EAAGtG,OAHJsG,EAAGtG,OAsB3B,OACI,uCACI,eAACuG,GAAA,EAAD,CAAMI,WAAS,EAACzC,MAAO,CAACwC,QAAS,UAAjC,SACI,eAACjF,GAAD,CAAaQ,QAASgE,MAE1B,eAACM,GAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,EAAzB,SACKP,Q,oBC5FjB,SAASQ,GAAMjF,GACX,OAAO,eAAC,KAAD,aAAU6E,UAAW,EAAGnE,QAAQ,UAAaV,IAGjD,SAASkF,KACZ,IAAMvH,EAAQmG,aAA6C,SAAAC,GAAK,OAAIA,EAAMoB,IAAIxH,SACxEN,EAAW2F,cAEXoC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJjI,EAASG,EAAY,QAGzB,OACI,eAAC+H,GAAA,EAAD,CAAUC,OAAQ7H,EAAO8H,iBAAkB,IAAMC,QAASN,EAA1D,SACI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKhI,M,qDCVJiI,GAAQ,WAEjB,IAAM9H,EAAagG,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKlG,cACxET,EAAW2F,cAEX6C,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAGhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIdI,EAAOH,SAEDG,EAAOH,SAAS1I,OAAS,IAChC8I,EAAOJ,SAAW,gDAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GVjBK,IAACjJ,EUkBZE,GVlBYF,EUkBKiJ,EVlBN,uCAAqC,WAAM/I,GAAN,eAAA2B,EAAA,sEAEpD3B,EAASI,EAAa,YAF8B,SAGlCP,EAAcC,GAHoB,OAIxB,KADtBwC,EAH8C,QAI5CxC,KAAKyC,YACTvC,EAASU,GAAc,IACvBV,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GARiB,gDAWpDK,EAAyB,EAAD,GAAQL,GAXoB,yDAArC,wDUmBXwI,EAAOW,eAIf,OAAI1I,EACO,eAAC,KAAD,CAAU0G,GAAI,MAGlB,eAACG,GAAA,EAAD,CAAMI,WAAS,EAAC0B,QAAQ,SAAxB,SACH,eAAC9B,GAAA,EAAD,CAAMT,MAAI,EAACwC,GAAI,EAAf,SACI,uBAAMH,SAAUV,EAAOc,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,qBAIJ,yEACA,2DACA,mDAEJ,gBAACC,GAAA,EAAD,WACI,eAACzG,GAAA,EAAD,aACIC,MAAM,QACNyG,OAAO,UACHrB,EAAOsB,cAAc,WAE5BtB,EAAOuB,QAAQpB,OAChBH,EAAOQ,OAAOL,OACd,sBAAK1D,MAAO,CAACb,MAAO,OAApB,SAA6BoE,EAAOQ,OAAOL,QAE3C,eAACxF,GAAA,EAAD,aACIxC,KAAK,WACLyC,MAAM,WACNyG,OAAO,UACHrB,EAAOsB,cAAc,cAE5BtB,EAAOuB,QAAQnB,UAChBJ,EAAOQ,OAAOJ,UACd,sBAAK3D,MAAO,CAACb,MAAO,OAApB,SAA6BoE,EAAOQ,OAAOJ,WAE3C,eAACoB,GAAA,EAAD,CACI5G,MAAO,cACP6G,QAAS,eAAC7E,GAAA,EAAD,eAAcoD,EAAOsB,cAAc,kBAEhD,eAACzD,EAAA,EAAD,CAAQ1F,KAAM,SAAU0C,QAAS,YAAae,MAAO,UAArD,gCCDT8F,OAhER,WACH,IAaMC,EAbYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAM1C,QAAQ,IAE/BrI,MAAO,CACHkL,SAAU,OAING,GAEV/J,EAAS6F,aAAiD,SAAAC,GAAK,OAAIA,EAAMoB,IAAIlH,UAC7EC,EAAgB4F,aAAuC,SAAAC,GAAK,OAAIA,EAAMoB,IAAIjH,iBAC1EJ,EAAagG,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKlG,cACxET,EAAW2F,cAMjB,OAJAC,qBAAU,WACN5F,EVZqB,uCAAgB,WAAMA,GAAN,eAAA2B,EAAA,+EAEnB9B,IAFmB,OAGT,KADtByC,EAF+B,QAG7BxC,KAAKyC,WACTvC,EAASU,GAAc,IAEvBX,EAAqBuC,EAAIxC,KAAME,GANE,gDASrCK,EAAyB,EAAD,GAAQL,GATK,yBAWrCA,EAdqD,CAACW,KAAM,yBAA0BE,eAc5D,IAXW,4EAAhB,yDUatB,IAEEA,EAYD,uBAAK+J,UAAWT,EAAQI,KAAxB,UACI,eAAC1C,GAAD,IACA,eAACgD,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,gBAACC,EAAA,EAAD,WACI,eAACjH,EAAA,EAAD,CAAYkH,KAAK,QAAQJ,UAAWT,EAAQM,WAAYrG,MAAM,UAAU6G,aAAW,OAAnF,SACI,eAACC,EAAA,EAAD,MAEJ,eAACC,EAAA,EAAD,CAAY9H,QAAQ,KAAKuH,UAAWT,EAAQ7K,MAA5C,sBAGCmB,GAAc,eAAC4F,EAAA,EAAD,CAAQjC,MAAM,UAAUL,QAflC,WACjB/D,EXnBgB,uCAAgB,WAAMA,GAAN,eAAA2B,EAAA,sEAEhC3B,EAASI,EAAa,YAFU,SAGdP,IAHc,OAIJ,KADtByC,EAH0B,QAIxBxC,KAAKyC,YACTvC,EAASU,GAAc,IACvBV,EAASI,EAAa,eAEtBL,EAAqBuC,EAAIxC,KAAME,GARH,gDAWhCK,EAAyB,EAAD,GAAQL,GAXA,yDAAhB,wDWiCW,yBAGX,YAAXY,GAAwB,eAACwK,EAAA,EAAD,CAAgBhH,MAAM,cAC/C,eAACiH,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,eAAC,GAAD,OACtC,eAAC,KAAD,CAAOF,OAAK,EAACC,KAAM,SAAUC,OAAQ,kBAAM,eAAC,GAAD,OAE3C,eAAC,KAAD,CAAOF,OAAK,EAACC,KAAM,OAAQC,OAAQ,kBAAM,yDACzC,eAAC,KAAD,CAAUC,KAAM,IAAKvE,GAAI,iBA/B9B,sBACHlC,MAAO,CAAC6F,SAAU,QAASa,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADhE,SAEH,eAACC,EAAA,EAAD,O,kBC3CNC,GAAcC,aAAgB,CAChC7K,MTcwB,WAAoE,IAAnEuF,EAAkE,uDAA1DlG,EAAcyL,EAA4C,uCAC3F,OAAQA,EAAOtL,MACX,IAAK,gBACD,IAAMuL,EAAI,eAAOxF,GAIjB,OAHAuF,EAAOzF,UAAU2F,SAAQ,SAAA9E,GACrB6E,EAAK7E,EAAGtG,IAAM,MAEXmL,EAEX,IAAK,YACD,OAAO,2BAAIxF,GAAX,kBAAmBuF,EAAO/K,WAAa+K,EAAO9K,MAAM8E,KAAI,SAAAnE,GAAC,kCAASA,GAAT,IAAYR,aAAc,cACvF,IAAK,cACD,OAAO,2BACAoF,GADP,kBAEKuF,EAAO/K,WAAawF,EAAMuF,EAAO/K,YAAYuE,QAAO,SAAA4B,GAAE,OAAIA,EAAGtG,KAAOkL,EAAOtM,YAEpF,IAAK,WACD,OAAO,2BACA+G,GADP,kBAEKuF,EAAOvH,KAAKxD,WAFjB,4BAEmC+K,EAAOvH,MAF1C,IAEgDpD,aAAc,UAF9D,mBAE0EoF,EAAMuF,EAAOvH,KAAKxD,gBAEhG,IAAK,cACD,OAAO,2BACAwF,GADP,kBAEKuF,EAAO/K,WAAawF,EAAMuF,EAAO/K,YAC7B+E,KAAI,SAAAvB,GAAI,OAAIA,EAAK3D,KAAOkL,EAAOtM,OAAnB,2BACH+E,GAASuH,EAAOrM,OACpB8E,OAElB,IAAK,eACD,OAAO,2BACAgC,GADP,kBAEKuF,EAAOhF,SAASlG,GAAK,KAE9B,IAAK,kBACD,IAAIqL,EAAS,eAAO1F,GAEpB,cADO0F,EAAUH,EAAOlL,IACjBqL,EAEX,IAAK,4BACD,OAAO,2BACA1F,GADP,kBAEKuF,EAAO/K,WAAawF,EAAMuF,EAAO/K,YAC7B+E,KAAI,SAAAvB,GAAI,OAAIA,EAAK3D,KAAOkL,EAAOtM,OAAnB,2BACH+E,GADG,IACGpD,aAAc2K,EAAO3K,eAC/BoD,OAGlB,QACI,OAAOgC,IS9DfF,UVJ4B,WAAmG,IAAlGE,EAAiG,uDAAnElG,EAAcyL,EAAqD,uCAC9H,OAAQA,EAAOtL,MACX,IAAK,gBACD,OAAOsL,EAAOzF,UAAUP,KAAI,SAAAoB,GAAE,kCAASA,GAAT,IAAY5B,OAAQ,MAAOnE,aAAc,YAC3E,IAAK,kBACD,OAAOoF,EAAMjB,QAAO,SAAA4B,GAAE,OAAIA,EAAGtG,KAAOkL,EAAOlL,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAYkL,EAAOhF,UAAnB,IAA4BxB,OAAQ,MAAOnE,aAAc,UAAzD,mBAAqEoF,IACzE,IAAK,wBACD,OAAOA,EAAMT,KAAI,SAAAoB,GAAE,OAAIA,EAAGtG,KAAOkL,EAAOlL,GAAjB,2BAA0BsG,GAA1B,IAA8B/H,MAAO2M,EAAO3M,QAAS+H,KAChF,IAAK,yBACD,OAAOX,EAAMT,KAAI,SAAAoB,GAAE,OAAIA,EAAGtG,KAAOkL,EAAOlL,GAAjB,2BAA0BsG,GAA1B,IAA8B5B,OAAQwG,EAAOxG,SAAU4B,KAClF,IAAK,gCACD,OAAOX,EAAMT,KAAI,SAAAoB,GAAE,OAAIA,EAAGtG,KAAOkL,EAAOlL,GAAjB,2BAA0BsG,GAA1B,IAA8B/F,aAAc2K,EAAO3K,eAAgB+F,KAC9F,QACI,OAAOX,IUVfoB,IXGsB,WAA6F,IAA5FpB,EAA2F,uDAAjElG,EAAcyL,EAAmD,uCAClH,OAAQA,EAAOtL,MACX,IAAK,iBACD,OAAO,2BAAI+F,GAAX,IAAkB9F,OAAQqL,EAAOrL,SACrC,IAAK,gBACD,OAAO,2BAAI8F,GAAX,IAAkBpG,MAAO2L,EAAO3L,QACpC,IAAK,yBACD,OAAO,2BAAIoG,GAAX,IAAkB7F,cAAeoL,EAAOpL,gBAC5C,QACI,OAAO6F,IWXfC,KZHuB,WAA8F,IAA7FD,EAA4F,uDAAlElG,EAAcyL,EAAoD,uCACpH,OAAQA,EAAOtL,MACX,IAAK,yBACD,OAAO,2BAAI+F,GAAX,IAAkBjG,WAAYwL,EAAOxL,aACzC,QAAS,OAAOiG,MYEX2F,GAAQC,aAAYP,GAAaQ,aAAgBC,OAU9DhO,OAAO6N,MAAQA,G,aCjBfI,IAAShB,OACL,eAAC,IAAD,CAAUY,MAAOA,GAAjB,SACI,eAAC,KAAD,UACI,eAAC,GAAD,QAEKK,SAASC,eAAe,ShB6HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5M,GACLyB,QAAQzB,MAAMA,EAAMC,c","file":"static/js/main.ebb990c6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppOld is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '458be47a-15a2-43bc-bb9e-a21974e6a059'\r\n    }\r\n})\r\n\r\n// API\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {\r\n            title\r\n        })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string,) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId: number }>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me')\r\n    }\r\n}\r\n\r\n// Types\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later,\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\ntype GetTasksResponse = {\r\n    totalCount: number\r\n    error: string | null\r\n    items: Array<TaskType>\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string,\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}","import {Dispatch} from 'redux';\r\nimport {setAppError, SetAppErrorType, setAppStatus, SetAppStatusType} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import {authAPI, LoginParamsType} from '../../api/todolist-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {SetAppErrorType, setAppStatus, SetAppStatusType} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'Login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default: return state\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({\r\n    type: 'Login/SET-IS-LOGGED-IN', isLoggedIn\r\n} as const)\r\n\r\n// Thunk\r\nexport const LoginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const LogoutTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// Types\r\nexport type AuthReducerActionType = ReturnType<typeof setIsLoggedIn> | SetAppStatusType | SetAppErrorType","import {AppThunk} from './store';\r\nimport {authAPI} from '../api/todolist-api';\r\nimport {setIsLoggedIn} from '../features/Login/authReducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: appActionActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitialized = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\n// Thunk\r\nexport const InitializeApp = (): AppThunk => async dispatch => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setIsInitialized(true))\r\n    }\r\n}\r\n\r\n// Types\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitialized>\r\nexport type appActionActionsType =\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | setIsInitializedType","import {todolistAPI, TodoListType} from '../../../api/todolist-api';\r\nimport {AppThunk} from '../../../app/store';\r\nimport {RequestStatusType, setAppStatus, SetAppStatusType} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\nconst initialState: TodoListDomainType[] = []\r\n\r\nexport const todoListsReducer = (state: TodoListDomainType[] = initialState, action: TodoListActionType): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todoLists.map(tl => ({...tl,filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList,filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTodoListAC = (todoLists: Array<TodoListType>) => ({type: 'SET-TODOLISTS', todoLists} as const)\r\nexport const removeTodoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todoList: TodoListType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const changeTodoListTitleAC = (id: string, title: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType) => ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\n\r\n// Thunk Creators\r\n// Async/Await func\r\nexport const fetchTodoLists = (): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.getTodos()\r\n        dispatch(setTodoListAC(res.data))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTodoList = (title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.createTodo(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTodoList = (todoListId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n        const res = await todolistAPI.deleteTodo(todoListId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTodoListAC(todoListId))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTodoListTitle = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.updateTodoTitle(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(changeTodoListTitleAC(todolistId, title))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// Types\r\nexport type SetTodoListActionType = ReturnType<typeof setTodoListAC>\r\nexport type AddTodoListActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodoListActionType = ReturnType<typeof removeTodoListAC>\r\nexport type changeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodoListActionType =\r\n    | SetTodoListActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetAppStatusType\r\n    | changeTodolistEntityStatusType\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodoListActionType, RemoveTodoListActionType, SetTodoListActionType} from './totolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities, UpdateTaskModelType} from '../../../api/todolist-api';\r\nimport {AppRootStateType, AppThunk} from '../../../app/store';\r\nimport {RequestStatusType, SetAppErrorType, setAppStatus, SetAppStatusType} from '../../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n}\r\nexport const tasksReducer = (state = initialState, action: TasksActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS': {\r\n            const copy = {...state}\r\n            action.todoLists.forEach(tl => {\r\n                copy[tl.id] = []\r\n            })\r\n            return copy\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todoListId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))}\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(tl => tl.id !== action.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, ...action.model}\r\n                        : task)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'CHANGE-TASK-ENTITY-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(task => task.id === action.taskId\r\n                        ? {...task, entityStatus: action.entityStatus}\r\n                        : task)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTasksAC = (todoListId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'SET-TASKS', tasks, todoListId} as const)\r\nexport const removeTaskAC = (todoListId: string, taskId: string) =>\r\n    ({type: 'REMOVE-TASK', todoListId, taskId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (todoListId: string, taskId: string, model: UpdateTaskModelType) =>\r\n    ({type: 'UPDATE-TASK', model, todoListId, taskId} as const)\r\nexport const changeTaskEntityStatusAC = (todoListId: string, taskId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS',\r\n    todoListId,\r\n    taskId,\r\n    entityStatus\r\n} as const)\r\n\r\n// Thunk Creators\r\nexport const fetchTasks = (todoListId: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.getTasks(todoListId)\r\n        const tasks = res.data.items\r\n        dispatch(setTasksAC(todoListId, tasks))\r\n        dispatch(setAppStatus('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const deleteTask = (todoListID: string, taskID: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.deleteTask(todoListID, taskID)\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(todoListID, taskID))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (todoListID: string, title: string): AppThunk => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const res = await todolistAPI.createTask(todoListID, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (todoListID: string, taskID: string, model: UpdateDomainTaskModelType): AppThunk => async (dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const currentTask = getState().tasks[todoListID].find(t => (t.id === taskID))\r\n    if (!currentTask) {\r\n        console.warn('Task not found in the state')\r\n        return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: currentTask.title,\r\n        status: currentTask.status,\r\n        deadline: currentTask.deadline,\r\n        description: currentTask.description,\r\n        priority: currentTask.priority,\r\n        startDate: currentTask.startDate,\r\n        ...model\r\n    }\r\n\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        dispatch(changeTaskEntityStatusAC(todoListID, taskID, 'loading'))\r\n        const res = await todolistAPI.updateTask(todoListID, taskID, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(updateTaskAC(todoListID, taskID, apiModel))\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(changeTaskEntityStatusAC(todoListID, taskID, 'succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// Types\r\nexport type TasksActionType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | SetTodoListActionType\r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskDomainType[]\r\n}\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {ControlPoint} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm render')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        if (error !== null) setError(null)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Title is required!')\r\n        }\r\n        setTitle('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label=\"Type value\"\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                helperText={error}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton onClick={addItem} disabled={props.disabled}>\r\n                <ControlPoint/>\r\n            </IconButton>\r\n            {/*{error && <div className={'errorMessage'}>'Title is required!'</div>} /!*{error}*!/*/}\r\n        </div>\r\n    )\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpan = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpan> = React.memo((props) => {\r\n    console.log('editableSpan render')\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onEditMode = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true)\r\n            setTitle(props.title)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setEditMode(false)\r\n            props.changeTitle(title)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={'secondary'}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onEnter}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../components/EdditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    } = props\r\n\r\n    const onClickHandler = () => {\r\n        removeTask(task.id)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\r\n        changeTaskTitle(task.id, newTitle)\r\n    }, [changeTaskTitle, task.id])\r\n\r\n    return (\r\n        <li style={task.status === TaskStatuses.Completed ? {opacity: '0.5'} : {opacity: 1}}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n                disabled={props.disabled}\r\n            />\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler} disabled={props.disabled}/>\r\n            <IconButton onClick={onClickHandler} disabled={props.disabled}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EdditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {FilterValuesType} from './totolists-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchTasks, TaskDomainType} from './tasks-reducer';\r\nimport {RequestStatusType} from '../../../app/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskDomainType>\r\n    addTask: (todoListID: string, taskID: string) => void\r\n    removeTask: (todoListID: string, taskID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (todoListID: string, newFilterValue: FilterValuesType) => void\r\n    changeTodoListTitle: (todoListID: string, newTitle: string) => void\r\n    changeTaskStatus: (todoListID: string, taskID: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n    console.log('todolist render')\r\n    const {\r\n        title,\r\n        filter,\r\n        todoListID,\r\n        changeTodoListFilter\r\n    } = props\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(todoListID))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(todoListID, title)\r\n    }, [props.addTask, todoListID])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(todoListID)\r\n    }\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(todoListID, title)\r\n    }, [props.changeTodoListTitle, todoListID])\r\n\r\n    const setAllFilter = () => changeTodoListFilter(todoListID, 'all')\r\n    const setActiveFilter = () => changeTodoListFilter(todoListID, 'active')\r\n    const setCompletedFilter = () => changeTodoListFilter(todoListID, 'completed')\r\n\r\n    // let tasksForTodolist = props.tasks\r\n    //\r\n    // if (filter === 'active') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    // }\r\n    // if (filter === 'completed') {\r\n    //     tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    // }\r\n\r\n    const getTasksForTodoList = (tasks: TaskDomainType[]) => {\r\n        switch (filter) {\r\n            case 'active':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'completed':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        props.removeTask(todoListID, taskID)\r\n    }, [todoListID, props.removeTask])\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses) => {\r\n        props.changeTaskStatus(todoListID, taskID, status)\r\n    }, [props.changeTaskStatus, todoListID])\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string) => {\r\n        props.changeTaskTitle(todoListID, taskID, newTitle)\r\n    }, [props.changeTaskTitle, todoListID])\r\n\r\n    const tasks = getTasksForTodoList(props.tasks).map(task => {\r\n            return <Task\r\n                key={task.id}\r\n                task={task}\r\n                removeTask={removeTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n                disabled={task.entityStatus === 'loading'}\r\n            />\r\n        }\r\n    )\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} changeTitle={changeTodoListTitle} disabled={props.entityStatus === 'loading'}/>\r\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n            <ul style={{listStyle: 'none', paddingLeft: 0}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={filter === 'all' ? 'contained' : 'text'}\r\n                    size={'small'}\r\n                    onClick={setAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'active' ? 'contained' : 'text'}\r\n                    color={'secondary'}\r\n                    size={'small'}\r\n                    onClick={setActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    variant={filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    size={'small'}\r\n                    onClick={setCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {\r\n    changeTodoListFilterAC,\r\n    createTodoList,\r\n    deleteTodoList,\r\n    fetchTodoLists,\r\n    FilterValuesType,\r\n    TodoListDomainType,\r\n    updateTodoListTitle\r\n} from './TodoList/totolists-reducer';\r\nimport {createTask, deleteTask, TasksStateType, updateTask} from './TodoList/tasks-reducer';\r\nimport {TaskStatuses} from '../../api/todolist-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {TodoList} from './TodoList/TodoList';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype TodoListsListPropsType = {}\r\nexport const TodoListsList: React.FC<TodoListsListPropsType> = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((todoListID: string, taskID: string) => {\r\n        dispatch(deleteTask(todoListID, taskID))\r\n\r\n    }, [dispatch])\r\n    const addTask = useCallback((todoListID: string, title: string) => {\r\n        dispatch(createTask(todoListID, title))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((todoListID: string, taskID: string, status: TaskStatuses) => {\r\n        dispatch(updateTask(todoListID, taskID, {status}))\r\n\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((todoListID: string, taskID: string, newTitle: string) => {\r\n        dispatch(updateTask(todoListID, taskID, {title: newTitle}))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListFilter = useCallback((todoListID: string, newFilterValue: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, newFilterValue))\r\n\r\n    }, [dispatch])\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoList(title))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoList(todoListID))\r\n\r\n    }, [dispatch])\r\n    const changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n        dispatch(updateTodoListTitle(todoListID, newTitle))\r\n\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={6} style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        todoListID={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        entityStatus={tl.entityStatus}\r\n                        tasks={tasks[tl.id]}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px 0'}}>\r\n                <AddItemForm addItem={addTodoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todoListsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../app/store';\r\nimport {setAppError,} from '../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LoginTC} from './authReducer';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Password must be more than 2 characters long';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(LoginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'} rel=\"noreferrer\">here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    createStyles,\r\n    IconButton, LinearProgress,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TodoListsList} from '../features/TodoListsList/TodoListsList';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {InitializeApp, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar';\r\nimport {Route, Switch, Redirect} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login';\r\nimport {LogoutTC} from '../features/Login/authReducer';\r\n\r\n\r\nexport function App() {\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                flexGrow: 1,\r\n            },\r\n            menuButton: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n            title: {\r\n                flexGrow: 1,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(InitializeApp())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandle = () => {\r\n        dispatch(LogoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandle}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodoListsList/>}/>\r\n                    <Route exact path={'/login'} render={() => <Login/>}/>\r\n\r\n                    <Route exact path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TodoListActionType, todoListsReducer} from '../features/TodoListsList/TodoList/totolists-reducer';\r\nimport {TasksActionType, tasksReducer} from '../features/TodoListsList/TodoList/tasks-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {appActionActionsType, appReducer} from './app-reducer';\r\nimport {authReducer, AuthReducerActionType} from '../features/Login/authReducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionTypes = TasksActionType | TodoListActionType | appActionActionsType | AuthReducerActionType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionTypes>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}